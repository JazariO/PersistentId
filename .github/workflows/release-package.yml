name: Build and Upload Unity Package
on:
  release:
    types: [published]
jobs:
  build-package:
    name: Build and Upload UnityPackage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository at release tag
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
          fetch-depth: 0
      
      - name: Generate filtered meta file list
        run: |
          echo "Starting file list generation from PersistentId folder..."
          
          # Initialize the meta list file
          > metaList
          
          # Function to check if a path should be ignored (keeping for consistency)
          should_ignore() {
            local path="$1"
            if [ -f ".unitypackage-ignore" ]; then
              while IFS= read -r pattern; do
                # Skip empty lines and comments
                [[ -z "$pattern" || "$pattern" =~ ^#.*$ ]] && continue
                
                # Check if the path matches the pattern
                if [[ "$path" == $pattern* ]] || [[ "$path" =~ $pattern ]]; then
                  return 0  # Should ignore
                fi
              done < ".unitypackage-ignore"
            fi
            return 1  # Should not ignore
          }
          
          # Add the PersistentId folder meta file first
          echo "PersistentId.meta" >> metaList
          echo "Including base folder: PersistentId.meta"
          
          echo "Finding all .meta files in PersistentId folder..."
          # Find all .meta files within the PersistentId folder
          while IFS= read -r -d '' metafile; do
            # Remove leading "./" 
            clean_path="${metafile#./}"
            
            echo "$clean_path" >> metaList
            echo "Including: $clean_path"
          done < <(find PersistentId -name "*.meta" -print0)
          
          echo "Finding directory .meta files in PersistentId..."
          # Find .meta files for directories within PersistentId
          while IFS= read -r -d '' dir; do
            # Skip the PersistentId root directory itself
            [[ "$dir" == "PersistentId" ]] && continue
            
            # Remove leading "./"
            clean_path="${dir#./}"
            
            # Check for corresponding .meta file for this directory
            if [ -f "${dir}.meta" ]; then
              meta_path="${clean_path}.meta"
              echo "$meta_path" >> metaList
              echo "Including directory meta: $meta_path"
            fi
          done < <(find PersistentId -type d -print0)
          
          # Remove any duplicate entries and sort
          sort metaList | uniq > metaList.tmp && mv metaList.tmp metaList
          
          echo ""
          echo "=== FINAL META LIST ==="
          cat metaList
          echo ""
          echo "Total entries: $(wc -l < metaList)"
          
          # Verify the file exists and has content
          if [ ! -s metaList ]; then
            echo "ERROR: metaList is empty!"
            exit 1
          fi
          
          echo "Final metaList size: $(wc -l < metaList) lines"
      
      - name: Debug ignore file content
        run: |
          if [ -f ".unitypackage-ignore" ]; then
            echo "=== UNITY PACKAGE IGNORE FILE CONTENT ==="
            cat .unitypackage-ignore
            echo "=== END IGNORE FILE ==="
          else
            echo "No .unitypackage-ignore file found"
          fi
      
      - name: Generate .unitypackage
        uses: pCYSl5EDgo/create-unitypackage@master
        with:
          package-path: "com.proselyte.persistence-${{ github.event.release.tag_name }}.unitypackage"
          include-files: metaList
      
      - name: Verify package was created
        run: |
          if [ -f "com.proselyte.persistence-${{ github.event.release.tag_name }}.unitypackage" ]; then
            echo "Unity package created successfully!"
            ls -la "com.proselyte.persistence-${{ github.event.release.tag_name }}.unitypackage"
          else
            echo "Unity package was not created!"
            exit 1
          fi
      
      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.release.tag_name }}
          name: "Release ${{ github.event.release.tag_name }}"
          files: "com.proselyte.persistence-${{ github.event.release.tag_name }}.unitypackage"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}